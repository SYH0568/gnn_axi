// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sigmoid_HH_
#define _sigmoid_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sigmoid_sigmoid_txdS.h"

namespace ap_rtl {

struct sigmoid : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<14> > data_V_read;
    sc_out< sc_lv<7> > ap_return;


    // Module declarations
    sigmoid(sc_module_name name);
    SC_HAS_PROCESS(sigmoid);

    ~sigmoid();

    sc_trace_file* mVcdFile;

    sigmoid_sigmoid_txdS* sigmoid_table10_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > sigmoid_table10_address0;
    sc_signal< sc_logic > sigmoid_table10_ce0;
    sc_signal< sc_lv<10> > sigmoid_table10_q0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln339_fu_207_p1;
    sc_signal< sc_lv<13> > tmp_fu_87_p4;
    sc_signal< sc_lv<24> > r_V_fu_79_p3;
    sc_signal< sc_lv<1> > trunc_ln851_fu_107_p1;
    sc_signal< sc_lv<7> > p_Result_2_fu_111_p3;
    sc_signal< sc_lv<14> > sext_ln835_fu_97_p1;
    sc_signal< sc_lv<1> > icmp_ln851_fu_119_p2;
    sc_signal< sc_lv<14> > ret_V_fu_125_p2;
    sc_signal< sc_lv<1> > p_Result_s_fu_101_p2;
    sc_signal< sc_lv<14> > select_ln851_fu_131_p3;
    sc_signal< sc_lv<14> > select_ln850_fu_139_p3;
    sc_signal< sc_lv<13> > trunc_ln336_fu_147_p1;
    sc_signal< sc_lv<14> > index_fu_151_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_163_p3;
    sc_signal< sc_lv<13> > add_ln336_1_fu_157_p2;
    sc_signal< sc_lv<13> > select_ln337_fu_171_p3;
    sc_signal< sc_lv<3> > tmp_2_fu_183_p4;
    sc_signal< sc_lv<1> > icmp_ln338_fu_193_p2;
    sc_signal< sc_lv<10> > trunc_ln337_fu_179_p1;
    sc_signal< sc_lv<10> > select_ln338_fu_199_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<24> ap_const_lv24_FFFFF1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<14> ap_const_lv14_200;
    static const sc_lv<13> ap_const_lv13_200;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<10> ap_const_lv10_3FF;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_9;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln336_1_fu_157_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_icmp_ln338_fu_193_p2();
    void thread_icmp_ln851_fu_119_p2();
    void thread_index_fu_151_p2();
    void thread_p_Result_2_fu_111_p3();
    void thread_p_Result_s_fu_101_p2();
    void thread_r_V_fu_79_p3();
    void thread_ret_V_fu_125_p2();
    void thread_select_ln337_fu_171_p3();
    void thread_select_ln338_fu_199_p3();
    void thread_select_ln850_fu_139_p3();
    void thread_select_ln851_fu_131_p3();
    void thread_sext_ln835_fu_97_p1();
    void thread_sigmoid_table10_address0();
    void thread_sigmoid_table10_ce0();
    void thread_tmp_1_fu_163_p3();
    void thread_tmp_2_fu_183_p4();
    void thread_tmp_fu_87_p4();
    void thread_trunc_ln336_fu_147_p1();
    void thread_trunc_ln337_fu_179_p1();
    void thread_trunc_ln851_fu_107_p1();
    void thread_zext_ln339_fu_207_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
