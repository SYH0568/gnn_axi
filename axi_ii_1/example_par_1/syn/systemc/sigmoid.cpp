// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sigmoid.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sigmoid::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sigmoid::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> sigmoid::ap_ST_fsm_pp0_stage0 = "1";
const bool sigmoid::ap_const_boolean_1 = true;
const sc_lv<32> sigmoid::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool sigmoid::ap_const_boolean_0 = false;
const sc_lv<10> sigmoid::ap_const_lv10_0 = "0000000000";
const sc_lv<32> sigmoid::ap_const_lv32_1 = "1";
const sc_lv<32> sigmoid::ap_const_lv32_D = "1101";
const sc_lv<24> sigmoid::ap_const_lv24_FFFFF1 = "111111111111111111110001";
const sc_lv<6> sigmoid::ap_const_lv6_0 = "000000";
const sc_lv<7> sigmoid::ap_const_lv7_0 = "0000000";
const sc_lv<14> sigmoid::ap_const_lv14_1 = "1";
const sc_lv<14> sigmoid::ap_const_lv14_200 = "1000000000";
const sc_lv<13> sigmoid::ap_const_lv13_200 = "1000000000";
const sc_lv<13> sigmoid::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> sigmoid::ap_const_lv32_A = "1010";
const sc_lv<32> sigmoid::ap_const_lv32_C = "1100";
const sc_lv<3> sigmoid::ap_const_lv3_0 = "000";
const sc_lv<10> sigmoid::ap_const_lv10_3FF = "1111111111";
const sc_lv<32> sigmoid::ap_const_lv32_3 = "11";
const sc_lv<32> sigmoid::ap_const_lv32_9 = "1001";

sigmoid::sigmoid(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sigmoid_table10_U = new sigmoid_sigmoid_txdS("sigmoid_table10_U");
    sigmoid_table10_U->clk(ap_clk);
    sigmoid_table10_U->reset(ap_rst);
    sigmoid_table10_U->address0(sigmoid_table10_address0);
    sigmoid_table10_U->ce0(sigmoid_table10_ce0);
    sigmoid_table10_U->q0(sigmoid_table10_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln336_1_fu_157_p2);
    sensitive << ( trunc_ln336_fu_147_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( sigmoid_table10_q0 );

    SC_METHOD(thread_icmp_ln338_fu_193_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_2_fu_183_p4 );

    SC_METHOD(thread_icmp_ln851_fu_119_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( p_Result_2_fu_111_p3 );

    SC_METHOD(thread_index_fu_151_p2);
    sensitive << ( select_ln850_fu_139_p3 );

    SC_METHOD(thread_p_Result_2_fu_111_p3);
    sensitive << ( trunc_ln851_fu_107_p1 );

    SC_METHOD(thread_p_Result_s_fu_101_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( r_V_fu_79_p3 );

    SC_METHOD(thread_r_V_fu_79_p3);
    sensitive << ( data_V_read );

    SC_METHOD(thread_ret_V_fu_125_p2);
    sensitive << ( sext_ln835_fu_97_p1 );

    SC_METHOD(thread_select_ln337_fu_171_p3);
    sensitive << ( tmp_1_fu_163_p3 );
    sensitive << ( add_ln336_1_fu_157_p2 );

    SC_METHOD(thread_select_ln338_fu_199_p3);
    sensitive << ( icmp_ln338_fu_193_p2 );
    sensitive << ( trunc_ln337_fu_179_p1 );

    SC_METHOD(thread_select_ln850_fu_139_p3);
    sensitive << ( sext_ln835_fu_97_p1 );
    sensitive << ( p_Result_s_fu_101_p2 );
    sensitive << ( select_ln851_fu_131_p3 );

    SC_METHOD(thread_select_ln851_fu_131_p3);
    sensitive << ( sext_ln835_fu_97_p1 );
    sensitive << ( icmp_ln851_fu_119_p2 );
    sensitive << ( ret_V_fu_125_p2 );

    SC_METHOD(thread_sext_ln835_fu_97_p1);
    sensitive << ( tmp_fu_87_p4 );

    SC_METHOD(thread_sigmoid_table10_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln339_fu_207_p1 );

    SC_METHOD(thread_sigmoid_table10_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_1_fu_163_p3);
    sensitive << ( index_fu_151_p2 );

    SC_METHOD(thread_tmp_2_fu_183_p4);
    sensitive << ( select_ln337_fu_171_p3 );

    SC_METHOD(thread_tmp_fu_87_p4);
    sensitive << ( data_V_read );

    SC_METHOD(thread_trunc_ln336_fu_147_p1);
    sensitive << ( select_ln850_fu_139_p3 );

    SC_METHOD(thread_trunc_ln337_fu_179_p1);
    sensitive << ( select_ln337_fu_171_p3 );

    SC_METHOD(thread_trunc_ln851_fu_107_p1);
    sensitive << ( data_V_read );

    SC_METHOD(thread_zext_ln339_fu_207_p1);
    sensitive << ( select_ln338_fu_199_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sigmoid_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_V_read, "(port)data_V_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, sigmoid_table10_address0, "sigmoid_table10_address0");
    sc_trace(mVcdFile, sigmoid_table10_ce0, "sigmoid_table10_ce0");
    sc_trace(mVcdFile, sigmoid_table10_q0, "sigmoid_table10_q0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln339_fu_207_p1, "zext_ln339_fu_207_p1");
    sc_trace(mVcdFile, tmp_fu_87_p4, "tmp_fu_87_p4");
    sc_trace(mVcdFile, r_V_fu_79_p3, "r_V_fu_79_p3");
    sc_trace(mVcdFile, trunc_ln851_fu_107_p1, "trunc_ln851_fu_107_p1");
    sc_trace(mVcdFile, p_Result_2_fu_111_p3, "p_Result_2_fu_111_p3");
    sc_trace(mVcdFile, sext_ln835_fu_97_p1, "sext_ln835_fu_97_p1");
    sc_trace(mVcdFile, icmp_ln851_fu_119_p2, "icmp_ln851_fu_119_p2");
    sc_trace(mVcdFile, ret_V_fu_125_p2, "ret_V_fu_125_p2");
    sc_trace(mVcdFile, p_Result_s_fu_101_p2, "p_Result_s_fu_101_p2");
    sc_trace(mVcdFile, select_ln851_fu_131_p3, "select_ln851_fu_131_p3");
    sc_trace(mVcdFile, select_ln850_fu_139_p3, "select_ln850_fu_139_p3");
    sc_trace(mVcdFile, trunc_ln336_fu_147_p1, "trunc_ln336_fu_147_p1");
    sc_trace(mVcdFile, index_fu_151_p2, "index_fu_151_p2");
    sc_trace(mVcdFile, tmp_1_fu_163_p3, "tmp_1_fu_163_p3");
    sc_trace(mVcdFile, add_ln336_1_fu_157_p2, "add_ln336_1_fu_157_p2");
    sc_trace(mVcdFile, select_ln337_fu_171_p3, "select_ln337_fu_171_p3");
    sc_trace(mVcdFile, tmp_2_fu_183_p4, "tmp_2_fu_183_p4");
    sc_trace(mVcdFile, icmp_ln338_fu_193_p2, "icmp_ln338_fu_193_p2");
    sc_trace(mVcdFile, trunc_ln337_fu_179_p1, "trunc_ln337_fu_179_p1");
    sc_trace(mVcdFile, select_ln338_fu_199_p3, "select_ln338_fu_199_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

sigmoid::~sigmoid() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sigmoid_table10_U;
}

void sigmoid::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
}

void sigmoid::thread_add_ln336_1_fu_157_p2() {
    add_ln336_1_fu_157_p2 = (!ap_const_lv13_200.is_01() || !trunc_ln336_fu_147_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(ap_const_lv13_200) + sc_biguint<13>(trunc_ln336_fu_147_p1.read()));
}

void sigmoid::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void sigmoid::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sigmoid::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void sigmoid::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void sigmoid::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void sigmoid::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sigmoid::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void sigmoid::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void sigmoid::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_return() {
    ap_return = sigmoid_table10_q0.read().range(9, 3);
}

void sigmoid::thread_icmp_ln338_fu_193_p2() {
    icmp_ln338_fu_193_p2 = (!tmp_2_fu_183_p4.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_183_p4.read() != ap_const_lv3_0);
}

void sigmoid::thread_icmp_ln851_fu_119_p2() {
    icmp_ln851_fu_119_p2 = (!p_Result_2_fu_111_p3.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_2_fu_111_p3.read() == ap_const_lv7_0);
}

void sigmoid::thread_index_fu_151_p2() {
    index_fu_151_p2 = (!ap_const_lv14_200.is_01() || !select_ln850_fu_139_p3.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_200) + sc_biguint<14>(select_ln850_fu_139_p3.read()));
}

void sigmoid::thread_p_Result_2_fu_111_p3() {
    p_Result_2_fu_111_p3 = esl_concat<1,6>(trunc_ln851_fu_107_p1.read(), ap_const_lv6_0);
}

void sigmoid::thread_p_Result_s_fu_101_p2() {
    p_Result_s_fu_101_p2 = (!r_V_fu_79_p3.read().is_01() || !ap_const_lv24_FFFFF1.is_01())? sc_lv<1>(): (sc_bigint<24>(r_V_fu_79_p3.read()) < sc_bigint<24>(ap_const_lv24_FFFFF1));
}

void sigmoid::thread_r_V_fu_79_p3() {
    r_V_fu_79_p3 = esl_concat<14,10>(data_V_read.read(), ap_const_lv10_0);
}

void sigmoid::thread_ret_V_fu_125_p2() {
    ret_V_fu_125_p2 = (!ap_const_lv14_1.is_01() || !sext_ln835_fu_97_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_1) + sc_bigint<14>(sext_ln835_fu_97_p1.read()));
}

void sigmoid::thread_select_ln337_fu_171_p3() {
    select_ln337_fu_171_p3 = (!tmp_1_fu_163_p3.read()[0].is_01())? sc_lv<13>(): ((tmp_1_fu_163_p3.read()[0].to_bool())? ap_const_lv13_0: add_ln336_1_fu_157_p2.read());
}

void sigmoid::thread_select_ln338_fu_199_p3() {
    select_ln338_fu_199_p3 = (!icmp_ln338_fu_193_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln338_fu_193_p2.read()[0].to_bool())? ap_const_lv10_3FF: trunc_ln337_fu_179_p1.read());
}

void sigmoid::thread_select_ln850_fu_139_p3() {
    select_ln850_fu_139_p3 = (!p_Result_s_fu_101_p2.read()[0].is_01())? sc_lv<14>(): ((p_Result_s_fu_101_p2.read()[0].to_bool())? select_ln851_fu_131_p3.read(): sext_ln835_fu_97_p1.read());
}

void sigmoid::thread_select_ln851_fu_131_p3() {
    select_ln851_fu_131_p3 = (!icmp_ln851_fu_119_p2.read()[0].is_01())? sc_lv<14>(): ((icmp_ln851_fu_119_p2.read()[0].to_bool())? sext_ln835_fu_97_p1.read(): ret_V_fu_125_p2.read());
}

void sigmoid::thread_sext_ln835_fu_97_p1() {
    sext_ln835_fu_97_p1 = esl_sext<14,13>(tmp_fu_87_p4.read());
}

void sigmoid::thread_sigmoid_table10_address0() {
    sigmoid_table10_address0 =  (sc_lv<10>) (zext_ln339_fu_207_p1.read());
}

void sigmoid::thread_sigmoid_table10_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        sigmoid_table10_ce0 = ap_const_logic_1;
    } else {
        sigmoid_table10_ce0 = ap_const_logic_0;
    }
}

void sigmoid::thread_tmp_1_fu_163_p3() {
    tmp_1_fu_163_p3 = index_fu_151_p2.read().range(13, 13);
}

void sigmoid::thread_tmp_2_fu_183_p4() {
    tmp_2_fu_183_p4 = select_ln337_fu_171_p3.read().range(12, 10);
}

void sigmoid::thread_tmp_fu_87_p4() {
    tmp_fu_87_p4 = data_V_read.read().range(13, 1);
}

void sigmoid::thread_trunc_ln336_fu_147_p1() {
    trunc_ln336_fu_147_p1 = select_ln850_fu_139_p3.read().range(13-1, 0);
}

void sigmoid::thread_trunc_ln337_fu_179_p1() {
    trunc_ln337_fu_179_p1 = select_ln337_fu_171_p3.read().range(10-1, 0);
}

void sigmoid::thread_trunc_ln851_fu_107_p1() {
    trunc_ln851_fu_107_p1 = data_V_read.read().range(1-1, 0);
}

void sigmoid::thread_zext_ln339_fu_207_p1() {
    zext_ln339_fu_207_p1 = esl_zext<64,10>(select_ln338_fu_199_p3.read());
}

void sigmoid::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

